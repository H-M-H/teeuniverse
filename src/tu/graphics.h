#ifndef TU_GRAPHICS_H
#define TU_GRAPHICS_H

#include <base/vmath.h>

namespace tu
{

//Item position
enum
{
	ITEMLAYER_UNDER_ITEM=0,
	ITEMLAYER_OVER_ITEM,
	ITEMLAYER_OVER_PLAYER,
	ITEMLAYER_UNDER_PARTICULES,
	ITEMLAYER_OVER_PARTICULES,
	ITEMLAYER_UNDER_NAMEPLATES,
	ITEMLAYER_OVER_NAMEPLATES,
	NUM_ITEMLAYER,
	
	ITEMLAYER_PREPLAYER = ITEMLAYER_UNDER_ITEM,
};

//Options
enum
{
	TEXTALIGN_CENTER = 0,
	TEXTALIGN_RIGHT_BOTTOM,
	TEXTALIGN_RIGHT_CENTER,
	TEXTALIGN_RIGHT_TOP,
	TEXTALIGN_CENTER_TOP,
	TEXTALIGN_LEFT_TOP,
	TEXTALIGN_LEFT_CENTER,
	TEXTALIGN_LEFT_BOTTOM,
	TEXTALIGN_CENTER_BOTTOM,
};

enum
{
	HAND_NONE = 0,
	HAND_BACKHAND,
	HAND_FRONTHAND,
};

enum
{
	TEEALIGN_NONE = 0,
	TEEALIGN_AIM,
	TEEALIGN_HORIZONTAL,
	TEEALIGN_DIRECTION,
	NUM_TEEALIGN,
};

enum
{
	ANIMCYCLETYPE_CLAMP = 0,
	ANIMCYCLETYPE_LOOP,
	NUM_ANIMCYCLETYPE,
};

//Internal resources
enum
{
	IMAGE_GAME = 0,
	IMAGE_PARTICLES,
	IMAGE_TEEBODYDEFAULT,
	IMAGE_TEEFEETDEFAULT,
	IMAGE_TEEHANDSDEFAULT,
	IMAGE_TEEEYESDEFAULT,
	NUM_IMAGES,
};

enum
{
	SPRITE_WHITESQUARE = 0,
	SPRITE_HAMMER,
	SPRITE_GUN,
	SPRITE_SHOTGUN,
	SPRITE_GRENADE,
	SPRITE_LASER,
	SPRITE_NINJA,
	SPRITE_GUN_MUZZLE1,
	SPRITE_GUN_MUZZLE2,
	SPRITE_GUN_MUZZLE3,
	SPRITE_SHOTGUN_MUZZLE1,
	SPRITE_SHOTGUN_MUZZLE2,
	SPRITE_SHOTGUN_MUZZLE3,
	SPRITE_NINJA_MUZZLE1,
	SPRITE_NINJA_MUZZLE2,
	SPRITE_NINJA_MUZZLE3,
	SPRITE_HAMMER_CURSOR,
	SPRITE_GUN_CURSOR,
	SPRITE_SHOTGUN_CURSOR,
	SPRITE_GRENADE_CURSOR,
	SPRITE_LASER_CURSOR,
	SPRITE_NINJA_CURSOR,
	SPRITE_HOOK_HEAD,
	SPRITE_HOOK_CHAIN,
	
	SPRITE_PART_SPLAT1,
	SPRITE_PART_SPLAT2,
	SPRITE_PART_SPLAT3,
	
	SPRITE_TEEBODYDEFAULT_SHADOW,
	SPRITE_TEEBODYDEFAULT_COLOR,
	SPRITE_TEEBODYDEFAULT_SHADING,
	SPRITE_TEEBODYDEFAULT_OUTLINE,
	
	SPRITE_TEEFEETDEFAULT_SHADOW,
	SPRITE_TEEFEETDEFAULT_COLOR,
	
	SPRITE_TEEHANDSDEFAULT_SHADOW,
	SPRITE_TEEHANDSDEFAULT_COLOR,
	
	SPRITE_TEEEYESDEFAULT_NORMAL,
	SPRITE_TEEEYESDEFAULT_ANGRY,
	SPRITE_TEEEYESDEFAULT_PAIN,
	SPRITE_TEEEYESDEFAULT_HAPPY,
	SPRITE_TEEEYESDEFAULT_FEAR,
	
	NUM_SPRITES,
};

enum
{
	LIST_GUN_MUZZLES = 0,
	LIST_SHOTGUN_MUZZLES,
	LIST_NINJA_MUZZLES,
	LIST_PART_SPLATS,
};

enum
{
	SKELETON_TEE = 0,
	SKELETON_HAMMER,
	SKELETON_GUN,
	SKELETON_SHOTGUN,
	NUM_SKELETONS,
};

enum
{
	TEEBONE_BODY = 0,
	TEEBONE_EYES,
	TEEBONE_BACKFOOT,
	TEEBONE_FRONTFOOT,
	TEEBONE_BACKARM,
	TEEBONE_BACKHAND,
	TEEBONE_FRONTARM,
	TEEBONE_FRONTHAND,
	NUM_TEEBONES,
};

enum
{
	TEELAYER_ATTACH = 0,
	TEELAYER_BACKHANDSHADOW,
	TEELAYER_FRONTHANDSHADOW,
	TEELAYER_BACKFOOTSHADOW,
	TEELAYER_BODYSHADOW,
	TEELAYER_FRONTFOOTSHADOW,
	TEELAYER_BACKHAND,
	TEELAYER_FRONTHAND,
	TEELAYER_BACKFOOT,
	TEELAYER_DECORATION,
	TEELAYER_BODY,
	TEELAYER_MARKING,
	TEELAYER_OUTLINE,
	TEELAYER_EYES_NORMAL,
	TEELAYER_EYES_ANGRY,
	TEELAYER_EYES_PAIN,
	TEELAYER_EYES_HAPPY,
	TEELAYER_EYES_FEAR,
	TEELAYER_FRONTFOOT,
	NUM_TEELAYERS,
};

enum
{
	SKELETONSKIN_TEEBODYDEFAULT = 0,
	SKELETONSKIN_TEEFEETDEFAULT,
	SKELETONSKIN_TEEHANDSDEFAULT,
	SKELETONSKIN_TEEEYESDEFAULT,
	SKELETONSKIN_HAMMER,
	SKELETONSKIN_GUN,
	SKELETONSKIN_SHOTGUN,
	NUM_SKELETONSKINS,
};

enum
{
	SKELETONANIMATION_TEEIDLE = 0,
	SKELETONANIMATION_TEEAIR,
	SKELETONANIMATION_TEEAIR2,
	SKELETONANIMATION_TEEWALK,
	SKELETONANIMATION_HAMMERATTACK,
	SKELETONANIMATION_GUNATTACK,
	SKELETONANIMATION_SHOTGUNATTACK,
	NUM_SKELETONANIMATIONS,
};

enum
{
	SKINPART_BODY=0,
	SKINPART_MARKING,
	SKINPART_DECORATION,
	SKINPART_HANDS,
	SKINPART_FEET,
	SKINPART_EYES,
	NUM_SKINPARTS
};

enum
{
	CHARACTER_TEE=0,
};

enum
{
	CHARACTERPART_TEEBODYDEFAULT=0,
	CHARACTERPART_TEEFEETDEFAULT,
	CHARACTERPART_TEEHANDSDEFAULT,
	CHARACTERPART_TEEEYESDEFAULT,
};

enum
{
	WEAPON_HAMMER=0,
	WEAPON_GUN,
};

enum
{
	GUIRECTSTYLE_BUTTON_DEFAULT=0,
	GUIRECTSTYLE_BUTTON_DEFAULT_MOUSEOVER,
	GUIRECTSTYLE_BUTTON_DEFAULT_HIGHLIGHT,
	GUIRECTSTYLE_BUTTON_LINK,
	GUIRECTSTYLE_BUTTON_LINK_MOUSEOVER,
	GUIRECTSTYLE_BUTTON_LINK_HIGHLIGHT,
	GUIRECTSTYLE_LAYOUT_DEFAULT,
	GUIRECTSTYLE_ENTRY_DEFAULT,
	GUIRECTSTYLE_ENTRY_DEFAULT_MOUSEOVER,
	GUIRECTSTYLE_TAB_CONTENT,
	GUIRECTSTYLE_TAB_BUTTON,
	GUIRECTSTYLE_TAB_BUTTON_HIGHLIGHT,
};

//Functions
inline int ColorToInt(const vec4& Color)
{
	int Value = static_cast<int>(Color.r * 255.0f);
	Value += (static_cast<int>(Color.g * 255.0f)<<8);
	Value += (static_cast<int>(Color.b * 255.0f)<<16);
	Value += (static_cast<int>(Color.a * 255.0f)<<24);
	return Value;
}

inline vec4 IntToColor(int Value)
{
	return vec4(
		static_cast<float>(Value & 255)/255.0f,
		static_cast<float>((Value>>8) & 255)/255.0f,
		static_cast<float>((Value>>16) & 255)/255.0f,
		static_cast<float>((Value>>24) & 255)/255.0f
	);
}

}

#endif
