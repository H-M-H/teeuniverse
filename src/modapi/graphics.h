#ifndef MODAPI_GRAPHICS_H
#define MODAPI_GRAPHICS_H

#include <base/vmath.h>

//Item position
enum
{
	MODAPI_ITEMLAYER_UNDER_ITEM=0,
	MODAPI_ITEMLAYER_OVER_ITEM,
	MODAPI_ITEMLAYER_OVER_PLAYER,
	MODAPI_ITEMLAYER_UNDER_PARTICULES,
	MODAPI_ITEMLAYER_OVER_PARTICULES,
	MODAPI_ITEMLAYER_UNDER_NAMEPLATES,
	MODAPI_ITEMLAYER_OVER_NAMEPLATES,
	MODAPI_NUM_ITEMLAYER,
	
	MODAPI_ITEMLAYER_PREPLAYER = MODAPI_ITEMLAYER_UNDER_ITEM,
};

//Options
enum
{
	MODAPI_LINESTYLE_ANIMATION_NONE = 0,
	MODAPI_LINESTYLE_ANIMATION_SCALEDOWN,
};

enum
{
	MODAPI_LINESTYLE_SPRITETYPE_REPEATED = 0,
};

enum
{
	MODAPI_TEXTALIGN_CENTER = 0,
	MODAPI_TEXTALIGN_RIGHT_BOTTOM,
	MODAPI_TEXTALIGN_RIGHT_CENTER,
	MODAPI_TEXTALIGN_RIGHT_TOP,
	MODAPI_TEXTALIGN_CENTER_TOP,
	MODAPI_TEXTALIGN_LEFT_TOP,
	MODAPI_TEXTALIGN_LEFT_CENTER,
	MODAPI_TEXTALIGN_LEFT_BOTTOM,
	MODAPI_TEXTALIGN_CENTER_BOTTOM,
};

enum
{
	MODAPI_HAND_NONE = 0,
	MODAPI_HAND_BACKHAND,
	MODAPI_HAND_FRONTHAND,
};

enum
{
	MODAPI_TEEALIGN_NONE = 0,
	MODAPI_TEEALIGN_AIM,
	MODAPI_TEEALIGN_HORIZONTAL,
	MODAPI_TEEALIGN_DIRECTION,
	MODAPI_NUM_TEEALIGN,
};

enum
{
	MODAPI_ANIMCYCLETYPE_CLAMP = 0,
	MODAPI_ANIMCYCLETYPE_LOOP,
	MODAPI_NUM_ANIMCYCLETYPE,
};

enum
{
	MODAPI_SPRITEFLAG_FLIP_Y = 0x1,
	MODAPI_SPRITEFLAG_FLIP_X = 0x2,
	MODAPI_SPRITEFLAG_FLIP_ANIM_Y = 0x4,
	MODAPI_SPRITEFLAG_FLIP_ANIM_X = 0x8,
};

//Internal resources
enum
{
	MODAPI_IMAGE_GAME = 0,
	MODAPI_NUM_IMAGES,
};

enum
{
	MODAPI_SPRITE_HAMMER = 0,
	MODAPI_SPRITE_GUN,
	MODAPI_SPRITE_SHOTGUN,
	MODAPI_SPRITE_GRENADE,
	MODAPI_SPRITE_LASER,
	MODAPI_SPRITE_NINJA,
	MODAPI_SPRITE_GUN_MUZZLE1,
	MODAPI_SPRITE_GUN_MUZZLE2,
	MODAPI_SPRITE_GUN_MUZZLE3,
	MODAPI_SPRITE_SHOTGUN_MUZZLE1,
	MODAPI_SPRITE_SHOTGUN_MUZZLE2,
	MODAPI_SPRITE_SHOTGUN_MUZZLE3,
	MODAPI_SPRITE_NINJA_MUZZLE1,
	MODAPI_SPRITE_NINJA_MUZZLE2,
	MODAPI_SPRITE_NINJA_MUZZLE3,
	MODAPI_SPRITE_HAMMER_CURSOR,
	MODAPI_SPRITE_GUN_CURSOR,
	MODAPI_SPRITE_SHOTGUN_CURSOR,
	MODAPI_SPRITE_GRENADE_CURSOR,
	MODAPI_SPRITE_LASER_CURSOR,
	MODAPI_SPRITE_NINJA_CURSOR,
	MODAPI_NUM_SPRITES,
};

enum
{
	MODAPI_SPRITELIST_GUN_MUZZLES = 0,
	MODAPI_SPRITELIST_SHOTGUN_MUZZLES,
	MODAPI_SPRITELIST_NINJA_MUZZLES,
};

enum
{
	MODAPI_NUM_LINESTYLES = 0,
};

enum
{
	MODAPI_ANIMATION_IDLE_BACKFOOT = 0,
	MODAPI_ANIMATION_IDLE_FRONTFOOT,
	MODAPI_ANIMATION_INAIR_BACKFOOT,
	MODAPI_ANIMATION_INAIR_FRONTFOOT,
	MODAPI_ANIMATION_WALK_BODY,
	MODAPI_ANIMATION_WALK_BACKFOOT,
	MODAPI_ANIMATION_WALK_FRONTFOOT,
	MODAPI_ANIMATION_HAMMERATTACK_WEAPON,
	MODAPI_ANIMATION_GUNATTACK_WEAPON,
	MODAPI_ANIMATION_GUNATTACK_MUZZLE,
	MODAPI_ANIMATION_GUNATTACK_BACKHAND,
	MODAPI_ANIMATION_SHOTGUNATTACK_WEAPON,
	MODAPI_ANIMATION_SHOTGUNATTACK_MUZZLE,
	MODAPI_ANIMATION_SHOTGUNATTACK_BACKHAND,
	MODAPI_ANIMATION_GRENADEATTACK_WEAPON,
	MODAPI_ANIMATION_GRENADEATTACK_BACKHAND,
	MODAPI_ANIMATION_LASERATTACK_WEAPON,
	MODAPI_ANIMATION_NINJAATTACK_WEAPON,
	MODAPI_ANIMATION_NINJAATTACK_MUZZLE,
	MODAPI_NUM_ANIMATIONS,
};

enum
{
	MODAPI_TEEANIMATION_IDLE = 0,
	MODAPI_TEEANIMATION_INAIR,
	MODAPI_TEEANIMATION_WALK,
	MODAPI_TEEANIMATION_GUNATTACK,
	MODAPI_TEEANIMATION_SHOTGUNATTACK,
	MODAPI_TEEANIMATION_GRENADEATTACK,
	MODAPI_NUM_TEEANIMATIONS,
};

enum
{
	MODAPI_ATTACH_HAMMER = 0,
	MODAPI_ATTACH_GUN,
	MODAPI_ATTACH_SHOTGUN,
	MODAPI_ATTACH_GRENADE,
	MODAPI_ATTACH_LASER,
	MODAPI_ATTACH_NINJA,
	MODAPI_NUM_ATTACHES,
};

//Functions
inline int ModAPI_ColorToInt(const vec4& Color)
{
	int Value = static_cast<int>(Color.r * 255.0f);
	Value += (static_cast<int>(Color.g * 255.0f)<<8);
	Value += (static_cast<int>(Color.b * 255.0f)<<16);
	Value += (static_cast<int>(Color.a * 255.0f)<<24);
	return Value;
}

inline vec4 ModAPI_IntToColor(int Value)
{
	return vec4(
		static_cast<float>(Value & 255)/255.0f,
		static_cast<float>((Value>>8) & 255)/255.0f,
		static_cast<float>((Value>>16) & 255)/255.0f,
		static_cast<float>((Value>>24) & 255)/255.0f
	);
}

#define MODAPI_INTERNAL_ID(id) ((id << 0x1) | 0x1)
#define MODAPI_EXTERNAL_ID(id) (id << 0x1)
#define MODAPI_IS_INTERNAL_ID(id) (id & 0x1)
#define MODAPI_GET_INTERNAL_ID(id) (id >> 0x1)
#define MODAPI_GET_EXTERNAL_ID(id) (id >> 0x1)

#endif
